# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_meldplugin', [dirname(__file__)])
        except ImportError:
            import _meldplugin
            return _meldplugin
        if fp is not None:
            try:
                _mod = imp.load_module('_meldplugin', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _meldplugin = swig_import_helper()
    del swig_import_helper
else:
    import _meldplugin
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


import simtk.openmm
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _meldplugin.delete_SwigPyIterator
    __del__ = lambda self: None

    def value(self):
        return _meldplugin.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _meldplugin.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _meldplugin.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _meldplugin.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _meldplugin.SwigPyIterator_equal(self, x)

    def copy(self):
        return _meldplugin.SwigPyIterator_copy(self)

    def next(self):
        return _meldplugin.SwigPyIterator_next(self)

    def __next__(self):
        return _meldplugin.SwigPyIterator___next__(self)

    def previous(self):
        return _meldplugin.SwigPyIterator_previous(self)

    def advance(self, n):
        return _meldplugin.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _meldplugin.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _meldplugin.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _meldplugin.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _meldplugin.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _meldplugin.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _meldplugin.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self
SwigPyIterator_swigregister = _meldplugin.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class vectord(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectord, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectord, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _meldplugin.vectord_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _meldplugin.vectord___nonzero__(self)

    def __bool__(self):
        return _meldplugin.vectord___bool__(self)

    def __len__(self):
        return _meldplugin.vectord___len__(self)

    def __getslice__(self, i, j):
        return _meldplugin.vectord___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _meldplugin.vectord___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _meldplugin.vectord___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _meldplugin.vectord___delitem__(self, *args)

    def __getitem__(self, *args):
        return _meldplugin.vectord___getitem__(self, *args)

    def __setitem__(self, *args):
        return _meldplugin.vectord___setitem__(self, *args)

    def pop(self):
        return _meldplugin.vectord_pop(self)

    def append(self, x):
        return _meldplugin.vectord_append(self, x)

    def empty(self):
        return _meldplugin.vectord_empty(self)

    def size(self):
        return _meldplugin.vectord_size(self)

    def swap(self, v):
        return _meldplugin.vectord_swap(self, v)

    def begin(self):
        return _meldplugin.vectord_begin(self)

    def end(self):
        return _meldplugin.vectord_end(self)

    def rbegin(self):
        return _meldplugin.vectord_rbegin(self)

    def rend(self):
        return _meldplugin.vectord_rend(self)

    def clear(self):
        return _meldplugin.vectord_clear(self)

    def get_allocator(self):
        return _meldplugin.vectord_get_allocator(self)

    def pop_back(self):
        return _meldplugin.vectord_pop_back(self)

    def erase(self, *args):
        return _meldplugin.vectord_erase(self, *args)

    def __init__(self, *args):
        this = _meldplugin.new_vectord(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _meldplugin.vectord_push_back(self, x)

    def front(self):
        return _meldplugin.vectord_front(self)

    def back(self):
        return _meldplugin.vectord_back(self)

    def assign(self, n, x):
        return _meldplugin.vectord_assign(self, n, x)

    def resize(self, *args):
        return _meldplugin.vectord_resize(self, *args)

    def insert(self, *args):
        return _meldplugin.vectord_insert(self, *args)

    def reserve(self, n):
        return _meldplugin.vectord_reserve(self, n)

    def capacity(self):
        return _meldplugin.vectord_capacity(self)
    __swig_destroy__ = _meldplugin.delete_vectord
    __del__ = lambda self: None
vectord_swigregister = _meldplugin.vectord_swigregister
vectord_swigregister(vectord)

class vectori(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectori, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectori, name)
    __repr__ = _swig_repr

    def iterator(self):
        return _meldplugin.vectori_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _meldplugin.vectori___nonzero__(self)

    def __bool__(self):
        return _meldplugin.vectori___bool__(self)

    def __len__(self):
        return _meldplugin.vectori___len__(self)

    def __getslice__(self, i, j):
        return _meldplugin.vectori___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _meldplugin.vectori___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _meldplugin.vectori___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _meldplugin.vectori___delitem__(self, *args)

    def __getitem__(self, *args):
        return _meldplugin.vectori___getitem__(self, *args)

    def __setitem__(self, *args):
        return _meldplugin.vectori___setitem__(self, *args)

    def pop(self):
        return _meldplugin.vectori_pop(self)

    def append(self, x):
        return _meldplugin.vectori_append(self, x)

    def empty(self):
        return _meldplugin.vectori_empty(self)

    def size(self):
        return _meldplugin.vectori_size(self)

    def swap(self, v):
        return _meldplugin.vectori_swap(self, v)

    def begin(self):
        return _meldplugin.vectori_begin(self)

    def end(self):
        return _meldplugin.vectori_end(self)

    def rbegin(self):
        return _meldplugin.vectori_rbegin(self)

    def rend(self):
        return _meldplugin.vectori_rend(self)

    def clear(self):
        return _meldplugin.vectori_clear(self)

    def get_allocator(self):
        return _meldplugin.vectori_get_allocator(self)

    def pop_back(self):
        return _meldplugin.vectori_pop_back(self)

    def erase(self, *args):
        return _meldplugin.vectori_erase(self, *args)

    def __init__(self, *args):
        this = _meldplugin.new_vectori(*args)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def push_back(self, x):
        return _meldplugin.vectori_push_back(self, x)

    def front(self):
        return _meldplugin.vectori_front(self)

    def back(self):
        return _meldplugin.vectori_back(self)

    def assign(self, n, x):
        return _meldplugin.vectori_assign(self, n, x)

    def resize(self, *args):
        return _meldplugin.vectori_resize(self, *args)

    def insert(self, *args):
        return _meldplugin.vectori_insert(self, *args)

    def reserve(self, n):
        return _meldplugin.vectori_reserve(self, n)

    def capacity(self):
        return _meldplugin.vectori_capacity(self)
    __swig_destroy__ = _meldplugin.delete_vectori
    __del__ = lambda self: None
vectori_swigregister = _meldplugin.vectori_swigregister
vectori_swigregister(vectori)


import simtk.unit as unit
import simtk.openmm as mm


__version__ = '0.5.0'

class MeldForce(simtk.openmm.Force):
    __swig_setmethods__ = {}
    for _s in [simtk.openmm.Force]:
        __swig_setmethods__.update(getattr(_s, '__swig_setmethods__', {}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeldForce, name, value)
    __swig_getmethods__ = {}
    for _s in [simtk.openmm.Force]:
        __swig_getmethods__.update(getattr(_s, '__swig_getmethods__', {}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeldForce, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _meldplugin.new_MeldForce()
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def updateParametersInContext(self, context):
        return _meldplugin.MeldForce_updateParametersInContext(self, context)

    def getNumDistRestraints(self):
        return _meldplugin.MeldForce_getNumDistRestraints(self)

    def getNumTorsionRestraints(self):
        return _meldplugin.MeldForce_getNumTorsionRestraints(self)

    def getNumDistProfileRestraints(self):
        return _meldplugin.MeldForce_getNumDistProfileRestraints(self)

    def getNumDistProfileRestParams(self):
        return _meldplugin.MeldForce_getNumDistProfileRestParams(self)

    def getNumTorsProfileRestraints(self):
        return _meldplugin.MeldForce_getNumTorsProfileRestraints(self)

    def getNumTorsProfileRestParams(self):
        return _meldplugin.MeldForce_getNumTorsProfileRestParams(self)

    def getNumGMMRestraints(self):
        return _meldplugin.MeldForce_getNumGMMRestraints(self)

    def getNumTotalRestraints(self):
        return _meldplugin.MeldForce_getNumTotalRestraints(self)

    def getNumGroups(self):
        return _meldplugin.MeldForce_getNumGroups(self)

    def getNumCollections(self):
        return _meldplugin.MeldForce_getNumCollections(self)

    def getDistanceRestraintParams(self, index):
        val = _meldplugin.MeldForce_getDistanceRestraintParams(self, index)

        val[2]=unit.Quantity(val[2], unit.nanometer)
        val[3]=unit.Quantity(val[3], unit.nanometer)
        val[4]=unit.Quantity(val[4], unit.nanometer)
        val[5]=unit.Quantity(val[5], unit.nanometer)
        val[6]=unit.Quantity(val[6], unit.kilojoule_per_mole/(unit.nanometer*unit.nanometer))


        return val


    def getTorsionRestraintParams(self, index):
        val = _meldplugin.MeldForce_getTorsionRestraintParams(self, index)

        val[4] = unit.Quantity(val[4], unit.degree)
        val[5] = unit.Quantity(val[5], unit.degree)
        val[6] = unit.Quantity(val[6], unit.kilojoule_per_mole / (unit.degree * unit.degree))


        return val


    def getDistProfileRestraintParams(self, index):
        val = _meldplugin.MeldForce_getDistProfileRestraintParams(self, index)

        val[2] = unit.Quantity(val[2], unit.nanometer)
        val[3] = unit.Quantity(val[3], unit.nanometer)


        return val


    def getTorsProfileRestraintParams(self, index):
        return _meldplugin.MeldForce_getTorsProfileRestraintParams(self, index)

    def getGMMRestraintParams(self, index, scale):
        return _meldplugin.MeldForce_getGMMRestraintParams(self, index, scale)

    def getGroupParams(self, index):
        return _meldplugin.MeldForce_getGroupParams(self, index)

    def getCollectionParams(self, index):
        return _meldplugin.MeldForce_getCollectionParams(self, index)

    def addDistanceRestraint(self, particle1, particle2, r1, r2, r3, r4, force_constant):
        return _meldplugin.MeldForce_addDistanceRestraint(self, particle1, particle2, r1, r2, r3, r4, force_constant)

    def modifyDistanceRestraint(self, index, particle1, particle2, r1, r2, r3, r4, force_constant):
        return _meldplugin.MeldForce_modifyDistanceRestraint(self, index, particle1, particle2, r1, r2, r3, r4, force_constant)

    def addHyperbolicDistanceRestraint(self, particle1, particle2, r1, r2, r3, r4, force_constant, asymptote):
        return _meldplugin.MeldForce_addHyperbolicDistanceRestraint(self, particle1, particle2, r1, r2, r3, r4, force_constant, asymptote)

    def modifyHyperbolicDistanceRestraint(self, index, particle1, particle2, r1, r2, r3, r4, force_constant, asymptote):
        return _meldplugin.MeldForce_modifyHyperbolicDistanceRestraint(self, index, particle1, particle2, r1, r2, r3, r4, force_constant, asymptote)

    def addTorsionRestraint(self, atom1, atom2, atom3, atom4, phi, deltaPhi, forceConstant):
        return _meldplugin.MeldForce_addTorsionRestraint(self, atom1, atom2, atom3, atom4, phi, deltaPhi, forceConstant)

    def modifyTorsionRestraint(self, index, atom1, atom2, atom3, atom4, phi, deltaPhi, forceConstant):
        return _meldplugin.MeldForce_modifyTorsionRestraint(self, index, atom1, atom2, atom3, atom4, phi, deltaPhi, forceConstant)

    def addDistProfileRestraint(self, atom1, atom2, rMin, rMax, nBins, a0, a1, a2, a3, scaleFactor):
        return _meldplugin.MeldForce_addDistProfileRestraint(self, atom1, atom2, rMin, rMax, nBins, a0, a1, a2, a3, scaleFactor)

    def modifyDistProfileRestraint(self, index, atom1, atom2, rMin, rMax, nBins, a0, a1, a2, a3, scaleFactor):
        return _meldplugin.MeldForce_modifyDistProfileRestraint(self, index, atom1, atom2, rMin, rMax, nBins, a0, a1, a2, a3, scaleFactor)

    def addTorsProfileRestraint(self, atom1, atom2, atom3, atom4, atom5, atom6, atom7, atom8, nBins, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, scaleFactor):
        return _meldplugin.MeldForce_addTorsProfileRestraint(self, atom1, atom2, atom3, atom4, atom5, atom6, atom7, atom8, nBins, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, scaleFactor)

    def modifyTorsProfileRestraint(self, index, atom1, atom2, atom3, atom4, atom5, atom6, atom7, atom8, nBins, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, scaleFactor):
        return _meldplugin.MeldForce_modifyTorsProfileRestraint(self, index, atom1, atom2, atom3, atom4, atom5, atom6, atom7, atom8, nBins, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, scaleFactor)

    def addGMMRestraint(self, nPairs, nComponents, scale, atomIndices, weights, means, precisionOnDiagonal, precisionOffDiagonal):
        return _meldplugin.MeldForce_addGMMRestraint(self, nPairs, nComponents, scale, atomIndices, weights, means, precisionOnDiagonal, precisionOffDiagonal)

    def modifyGMMRestraint(self, index, nPairs, nComponents, scale, atomIndices, weights, means, precisionOnDiagonal, precisionOffDiagonal):
        return _meldplugin.MeldForce_modifyGMMRestraint(self, index, nPairs, nComponents, scale, atomIndices, weights, means, precisionOnDiagonal, precisionOffDiagonal)

    def addGroup(self, restraint_indices, n_active):
        return _meldplugin.MeldForce_addGroup(self, restraint_indices, n_active)

    def addCollection(self, group_indices, n_active):
        return _meldplugin.MeldForce_addCollection(self, group_indices, n_active)
    __swig_destroy__ = _meldplugin.delete_MeldForce
    __del__ = lambda self: None
MeldForce_swigregister = _meldplugin.MeldForce_swigregister
MeldForce_swigregister(MeldForce)

# This file is compatible with both classic and new-style classes.


